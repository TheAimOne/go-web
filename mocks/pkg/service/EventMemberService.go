// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	member "github.com/go-web/pkg/model/member"
	mock "github.com/stretchr/testify/mock"

	model "github.com/go-web/pkg/model/event"
)

// EventMemberService is an autogenerated mock type for the EventMemberService type
type EventMemberService struct {
	mock.Mock
}

// CreateEventMember provides a mock function with given fields: eventRequest
func (_m *EventMemberService) CreateEventMember(eventRequest *model.AddMemberToEventRequest) (*model.AddMemberToEventResponse, error) {
	ret := _m.Called(eventRequest)

	var r0 *model.AddMemberToEventResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.AddMemberToEventRequest) (*model.AddMemberToEventResponse, error)); ok {
		return rf(eventRequest)
	}
	if rf, ok := ret.Get(0).(func(*model.AddMemberToEventRequest) *model.AddMemberToEventResponse); ok {
		r0 = rf(eventRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.AddMemberToEventResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.AddMemberToEventRequest) error); ok {
		r1 = rf(eventRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventMembers provides a mock function with given fields: request
func (_m *EventMemberService) GetEventMembers(request *member.GetEventMembersRequest) (*member.GetEventMembersResponse, error) {
	ret := _m.Called(request)

	var r0 *member.GetEventMembersResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*member.GetEventMembersRequest) (*member.GetEventMembersResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(*member.GetEventMembersRequest) *member.GetEventMembersResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*member.GetEventMembersResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*member.GetEventMembersRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEventMemberService creates a new instance of EventMemberService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventMemberService(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventMemberService {
	mock := &EventMemberService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
