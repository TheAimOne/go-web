// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	model "github.com/go-web/pkg/model/event"
	mock "github.com/stretchr/testify/mock"
)

// EventService is an autogenerated mock type for the EventService type
type EventService struct {
	mock.Mock
}

// CreateEvent provides a mock function with given fields: eventRequest
func (_m *EventService) CreateEvent(eventRequest *model.Event) (*model.EventResponse, error) {
	ret := _m.Called(eventRequest)

	var r0 *model.EventResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.Event) (*model.EventResponse, error)); ok {
		return rf(eventRequest)
	}
	if rf, ok := ret.Get(0).(func(*model.Event) *model.EventResponse); ok {
		r0 = rf(eventRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.EventResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.Event) error); ok {
		r1 = rf(eventRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventsByGroupId provides a mock function with given fields: eventRequest
func (_m *EventService) GetEventsByGroupId(eventRequest *model.GetEventRequest) (*model.GetEventResponse, error) {
	ret := _m.Called(eventRequest)

	var r0 *model.GetEventResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.GetEventRequest) (*model.GetEventResponse, error)); ok {
		return rf(eventRequest)
	}
	if rf, ok := ret.Get(0).(func(*model.GetEventRequest) *model.GetEventResponse); ok {
		r0 = rf(eventRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GetEventResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.GetEventRequest) error); ok {
		r1 = rf(eventRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEventService creates a new instance of EventService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventService(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventService {
	mock := &EventService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
