// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	model "github.com/go-web/pkg/model/group"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/satori/go.uuid"
)

// GroupService is an autogenerated mock type for the GroupService type
type GroupService struct {
	mock.Mock
}

// AddMembersToGroup provides a mock function with given fields: groupId, groupMember
func (_m *GroupService) AddMembersToGroup(groupId uuid.UUID, groupMember []*model.GroupMember) ([]*model.GroupMember, error) {
	ret := _m.Called(groupId, groupMember)

	var r0 []*model.GroupMember
	var r1 error
	if rf, ok := ret.Get(0).(func(uuid.UUID, []*model.GroupMember) ([]*model.GroupMember, error)); ok {
		return rf(groupId, groupMember)
	}
	if rf, ok := ret.Get(0).(func(uuid.UUID, []*model.GroupMember) []*model.GroupMember); ok {
		r0 = rf(groupId, groupMember)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.GroupMember)
		}
	}

	if rf, ok := ret.Get(1).(func(uuid.UUID, []*model.GroupMember) error); ok {
		r1 = rf(groupId, groupMember)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateGroupWithMembers provides a mock function with given fields: group
func (_m *GroupService) CreateGroupWithMembers(group *model.CreateGroupModel) (*model.CreateGroupModel, error) {
	ret := _m.Called(group)

	var r0 *model.CreateGroupModel
	var r1 error
	if rf, ok := ret.Get(0).(func(*model.CreateGroupModel) (*model.CreateGroupModel, error)); ok {
		return rf(group)
	}
	if rf, ok := ret.Get(0).(func(*model.CreateGroupModel) *model.CreateGroupModel); ok {
		r0 = rf(group)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.CreateGroupModel)
		}
	}

	if rf, ok := ret.Get(1).(func(*model.CreateGroupModel) error); ok {
		r1 = rf(group)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroup provides a mock function with given fields: groupId
func (_m *GroupService) GetGroup(groupId string) (*model.Group, error) {
	ret := _m.Called(groupId)

	var r0 *model.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Group, error)); ok {
		return rf(groupId)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Group); ok {
		r0 = rf(groupId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(groupId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroups provides a mock function with given fields: request
func (_m *GroupService) GetGroups(request model.GroupsByNameRequest) (*model.GroupsByMemberResponse, error) {
	ret := _m.Called(request)

	var r0 *model.GroupsByMemberResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(model.GroupsByNameRequest) (*model.GroupsByMemberResponse, error)); ok {
		return rf(request)
	}
	if rf, ok := ret.Get(0).(func(model.GroupsByNameRequest) *model.GroupsByMemberResponse); ok {
		r0 = rf(request)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GroupsByMemberResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(model.GroupsByNameRequest) error); ok {
		r1 = rf(request)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupsByMemberId provides a mock function with given fields: memberId
func (_m *GroupService) GetGroupsByMemberId(memberId string) (*model.GroupsByMemberResponse, error) {
	ret := _m.Called(memberId)

	var r0 *model.GroupsByMemberResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.GroupsByMemberResponse, error)); ok {
		return rf(memberId)
	}
	if rf, ok := ret.Get(0).(func(string) *model.GroupsByMemberResponse); ok {
		r0 = rf(memberId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.GroupsByMemberResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(memberId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMembersByGroupId provides a mock function with given fields: groupId
func (_m *GroupService) GetMembersByGroupId(groupId string) ([]*model.GroupMemberByIdResponse, error) {
	ret := _m.Called(groupId)

	var r0 []*model.GroupMemberByIdResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*model.GroupMemberByIdResponse, error)); ok {
		return rf(groupId)
	}
	if rf, ok := ret.Get(0).(func(string) []*model.GroupMemberByIdResponse); ok {
		r0 = rf(groupId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.GroupMemberByIdResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(groupId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGroupService creates a new instance of GroupService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGroupService(t interface {
	mock.TestingT
	Cleanup(func())
}) *GroupService {
	mock := &GroupService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
