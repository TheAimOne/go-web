// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	message "github.com/go-web/pkg/model/message"
	mock "github.com/stretchr/testify/mock"
)

// MessageService is an autogenerated mock type for the MessageService type
type MessageService struct {
	mock.Mock
}

// CreateMessage provides a mock function with given fields: m
func (_m *MessageService) CreateMessage(m *message.SendMessageReq) (*message.SendMessageResp, error) {
	ret := _m.Called(m)

	var r0 *message.SendMessageResp
	var r1 error
	if rf, ok := ret.Get(0).(func(*message.SendMessageReq) (*message.SendMessageResp, error)); ok {
		return rf(m)
	}
	if rf, ok := ret.Get(0).(func(*message.SendMessageReq) *message.SendMessageResp); ok {
		r0 = rf(m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*message.SendMessageResp)
		}
	}

	if rf, ok := ret.Get(1).(func(*message.SendMessageReq) error); ok {
		r1 = rf(m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RetrieveMessageForEvent provides a mock function with given fields: m
func (_m *MessageService) RetrieveMessageForEvent(m *message.RetrieveMessageReq) (*message.RetrieveMessageResp, error) {
	ret := _m.Called(m)

	var r0 *message.RetrieveMessageResp
	var r1 error
	if rf, ok := ret.Get(0).(func(*message.RetrieveMessageReq) (*message.RetrieveMessageResp, error)); ok {
		return rf(m)
	}
	if rf, ok := ret.Get(0).(func(*message.RetrieveMessageReq) *message.RetrieveMessageResp); ok {
		r0 = rf(m)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*message.RetrieveMessageResp)
		}
	}

	if rf, ok := ret.Get(1).(func(*message.RetrieveMessageReq) error); ok {
		r1 = rf(m)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMessageService creates a new instance of MessageService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageService {
	mock := &MessageService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
