// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	auth "github.com/go-web/pkg/model/auth"
	mock "github.com/stretchr/testify/mock"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: authRequest
func (_m *AuthService) Authenticate(authRequest *auth.AuthRequest) (*auth.AuthResponse, error) {
	ret := _m.Called(authRequest)

	var r0 *auth.AuthResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(*auth.AuthRequest) (*auth.AuthResponse, error)); ok {
		return rf(authRequest)
	}
	if rf, ok := ret.Get(0).(func(*auth.AuthRequest) *auth.AuthResponse); ok {
		r0 = rf(authRequest)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth.AuthResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(*auth.AuthRequest) error); ok {
		r1 = rf(authRequest)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewAuthService creates a new instance of AuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthService {
	mock := &AuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
