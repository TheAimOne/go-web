// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	model "github.com/go-web/pkg/model/venue"
	mock "github.com/stretchr/testify/mock"

	pkgmodel "github.com/go-web/pkg/model"
)

// VenueRepository is an autogenerated mock type for the VenueRepository type
type VenueRepository struct {
	mock.Mock
}

// CreateVenue provides a mock function with given fields: _a0
func (_m *VenueRepository) CreateVenue(_a0 *model.Venue) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Venue) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetVenues provides a mock function with given fields: _a0
func (_m *VenueRepository) GetVenues(_a0 *pkgmodel.Filter) ([]*model.Venue, error) {
	ret := _m.Called(_a0)

	var r0 []*model.Venue
	var r1 error
	if rf, ok := ret.Get(0).(func(*pkgmodel.Filter) ([]*model.Venue, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(*pkgmodel.Filter) []*model.Venue); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Venue)
		}
	}

	if rf, ok := ret.Get(1).(func(*pkgmodel.Filter) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewVenueRepository creates a new instance of VenueRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewVenueRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *VenueRepository {
	mock := &VenueRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
