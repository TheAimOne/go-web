// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	model "github.com/go-web/pkg/model/user"
	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// AuthenticateUserByEmail provides a mock function with given fields: email, password
func (_m *UserRepository) AuthenticateUserByEmail(email string, password string) (*model.User, error) {
	ret := _m.Called(email, password)

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.User, error)); ok {
		return rf(email, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.User); ok {
		r0 = rf(email, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthenticateUserByMobile provides a mock function with given fields: mobile, password
func (_m *UserRepository) AuthenticateUserByMobile(mobile string, password string) (*model.User, error) {
	ret := _m.Called(mobile, password)

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*model.User, error)); ok {
		return rf(mobile, password)
	}
	if rf, ok := ret.Get(0).(func(string, string) *model.User); ok {
		r0 = rf(mobile, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(mobile, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateUser provides a mock function with given fields: user
func (_m *UserRepository) CreateUser(user model.User) error {
	ret := _m.Called(user)

	var r0 error
	if rf, ok := ret.Get(0).(func(model.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetUserByMemberId provides a mock function with given fields: memberId
func (_m *UserRepository) GetUserByMemberId(memberId string) (*model.User, error) {
	ret := _m.Called(memberId)

	var r0 *model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.User, error)); ok {
		return rf(memberId)
	}
	if rf, ok := ret.Get(0).(func(string) *model.User); ok {
		r0 = rf(memberId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(memberId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsers provides a mock function with given fields: page, perPage
func (_m *UserRepository) GetUsers(page int, perPage int) ([]*model.User, error) {
	ret := _m.Called(page, perPage)

	var r0 []*model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*model.User, error)); ok {
		return rf(page, perPage)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*model.User); ok {
		r0 = rf(page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(page, perPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SearchUsers provides a mock function with given fields: filter
func (_m *UserRepository) SearchUsers(filter model.UserFilter) ([]*model.User, error) {
	ret := _m.Called(filter)

	var r0 []*model.User
	var r1 error
	if rf, ok := ret.Get(0).(func(model.UserFilter) ([]*model.User, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(model.UserFilter) []*model.User); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.User)
		}
	}

	if rf, ok := ret.Get(1).(func(model.UserFilter) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
