// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	model "github.com/go-web/pkg/model/group"
	mock "github.com/stretchr/testify/mock"
)

// GroupRepository is an autogenerated mock type for the GroupRepository type
type GroupRepository struct {
	mock.Mock
}

// AddMembersToGroup provides a mock function with given fields: groupMember
func (_m *GroupRepository) AddMembersToGroup(groupMember []*model.GroupMember) error {
	ret := _m.Called(groupMember)

	var r0 error
	if rf, ok := ret.Get(0).(func([]*model.GroupMember) error); ok {
		r0 = rf(groupMember)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateGroup provides a mock function with given fields: group
func (_m *GroupRepository) CreateGroup(group *model.Group) error {
	ret := _m.Called(group)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Group) error); ok {
		r0 = rf(group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetGroupById provides a mock function with given fields: groupId
func (_m *GroupRepository) GetGroupById(groupId string) (*model.Group, error) {
	ret := _m.Called(groupId)

	var r0 *model.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*model.Group, error)); ok {
		return rf(groupId)
	}
	if rf, ok := ret.Get(0).(func(string) *model.Group); ok {
		r0 = rf(groupId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(groupId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroups provides a mock function with given fields: name, page, perPage
func (_m *GroupRepository) GetGroups(name string, page int, perPage int) ([]*model.Group, error) {
	ret := _m.Called(name, page, perPage)

	var r0 []*model.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int, int) ([]*model.Group, error)); ok {
		return rf(name, page, perPage)
	}
	if rf, ok := ret.Get(0).(func(string, int, int) []*model.Group); ok {
		r0 = rf(name, page, perPage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, int) error); ok {
		r1 = rf(name, page, perPage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupsByMemberId provides a mock function with given fields: memberId
func (_m *GroupRepository) GetGroupsByMemberId(memberId string) ([]*model.Group, error) {
	ret := _m.Called(memberId)

	var r0 []*model.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*model.Group, error)); ok {
		return rf(memberId)
	}
	if rf, ok := ret.Get(0).(func(string) []*model.Group); ok {
		r0 = rf(memberId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(memberId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMembersByGroupId provides a mock function with given fields: groupId
func (_m *GroupRepository) GetMembersByGroupId(groupId string) ([]*model.GroupMemberByIdResponse, error) {
	ret := _m.Called(groupId)

	var r0 []*model.GroupMemberByIdResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string) ([]*model.GroupMemberByIdResponse, error)); ok {
		return rf(groupId)
	}
	if rf, ok := ret.Get(0).(func(string) []*model.GroupMemberByIdResponse); ok {
		r0 = rf(groupId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.GroupMemberByIdResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(groupId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewGroupRepository creates a new instance of GroupRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGroupRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *GroupRepository {
	mock := &GroupRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
