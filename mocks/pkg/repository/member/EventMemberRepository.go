// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	model "github.com/go-web/pkg/model/event"
	mock "github.com/stretchr/testify/mock"

	modelmember "github.com/go-web/pkg/model/member"
)

// EventMemberRepository is an autogenerated mock type for the EventMemberRepository type
type EventMemberRepository struct {
	mock.Mock
}

// AddEventMember provides a mock function with given fields: _a0
func (_m *EventMemberRepository) AddEventMember(_a0 *model.AddMemberToEventRequest) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.AddMemberToEventRequest) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEventMembers provides a mock function with given fields: addEventMember
func (_m *EventMemberRepository) GetEventMembers(addEventMember *modelmember.GetEventMembersRequest) ([]*modelmember.EventMember, error) {
	ret := _m.Called(addEventMember)

	var r0 []*modelmember.EventMember
	var r1 error
	if rf, ok := ret.Get(0).(func(*modelmember.GetEventMembersRequest) ([]*modelmember.EventMember, error)); ok {
		return rf(addEventMember)
	}
	if rf, ok := ret.Get(0).(func(*modelmember.GetEventMembersRequest) []*modelmember.EventMember); ok {
		r0 = rf(addEventMember)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*modelmember.EventMember)
		}
	}

	if rf, ok := ret.Get(1).(func(*modelmember.GetEventMembersRequest) error); ok {
		r1 = rf(addEventMember)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewEventMemberRepository creates a new instance of EventMemberRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventMemberRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventMemberRepository {
	mock := &EventMemberRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
