// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	sql "database/sql"

	mock "github.com/stretchr/testify/mock"
)

// DBFunction is an autogenerated mock type for the DBFunction type
type DBFunction struct {
	mock.Mock
}

// Insert provides a mock function with given fields: table, columns, values
func (_m *DBFunction) Insert(table string, columns []string, values []interface{}) error {
	ret := _m.Called(table, columns, values)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, []string, []interface{}) error); ok {
		r0 = rf(table, columns, values)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Select provides a mock function with given fields: table, condition, columns
func (_m *DBFunction) Select(table string, condition string, columns []string) (*sql.Row, error) {
	ret := _m.Called(table, condition, columns)

	var r0 *sql.Row
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, []string) (*sql.Row, error)); ok {
		return rf(table, condition, columns)
	}
	if rf, ok := ret.Get(0).(func(string, string, []string) *sql.Row); ok {
		r0 = rf(table, condition, columns)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Row)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, []string) error); ok {
		r1 = rf(table, condition, columns)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAll provides a mock function with given fields: table, condition, columns
func (_m *DBFunction) SelectAll(table string, condition string, columns []string) (*sql.Rows, error) {
	ret := _m.Called(table, condition, columns)

	var r0 *sql.Rows
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, []string) (*sql.Rows, error)); ok {
		return rf(table, condition, columns)
	}
	if rf, ok := ret.Get(0).(func(string, string, []string) *sql.Rows); ok {
		r0 = rf(table, condition, columns)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Rows)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, []string) error); ok {
		r1 = rf(table, condition, columns)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectRaw provides a mock function with given fields: query
func (_m *DBFunction) SelectRaw(query string) (*sql.Rows, error) {
	ret := _m.Called(query)

	var r0 *sql.Rows
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*sql.Rows, error)); ok {
		return rf(query)
	}
	if rf, ok := ret.Get(0).(func(string) *sql.Rows); ok {
		r0 = rf(query)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Rows)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(query)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewDBFunction creates a new instance of DBFunction. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDBFunction(t interface {
	mock.TestingT
	Cleanup(func())
}) *DBFunction {
	mock := &DBFunction{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
