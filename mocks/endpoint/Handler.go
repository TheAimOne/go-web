// Code generated by mockery v2.30.1. DO NOT EDIT.

package mocks

import (
	model "github.com/go-web/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// Handler is an autogenerated mock type for the Handler type
type Handler struct {
	mock.Mock
}

// Execute provides a mock function with given fields: i
func (_m *Handler) Execute(i interface{}) (*model.Response, error) {
	ret := _m.Called(i)

	var r0 *model.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) (*model.Response, error)); ok {
		return rf(i)
	}
	if rf, ok := ret.Get(0).(func(interface{}) *model.Response); ok {
		r0 = rf(i)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(i)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHandler creates a new instance of Handler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *Handler {
	mock := &Handler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
